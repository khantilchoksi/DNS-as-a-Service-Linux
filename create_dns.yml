---
- hosts: localhost
  gather_facts: no
  vars:
    docker_image: bind_centos
    docker_filepath: ./docker_images/bind_centos/
    packages:
       - docker
  vars_files:
    - dns_vars.yml

  tasks:
    - debug:
         msg: "{{dns_containers}}"
  
  # Install required packages
    - name: Install required packages for docker
      apt: 
        name: "{{packages}}"
      become: yes

   # Create docker image if not exists
    - name: Create docker image if not exists
      docker_image:
        path: "{{docker_filepath}}"
        name: "{{docker_image}}"
        state: present

    # Create shared volum in HV
    - name: Create shared volume in Hypervisor
      file: 
          path: "/srv/docker/{{dns_containers[item].dns_name}}"
          state: directory
          mode: 0777
      with_items: "{{ dns_containers | list }}"
      become: true

    # Change Resolve.conf file
    - name: Get the ip address assigned to DNS container
      command: "docker inspect -f {%raw%}'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'{%endraw%} {{dns_containers[item].parent_dns_name}}"
      become: yes
      with_items: "{{ dns_containers | list }}"
      register: parent_dns_ip

    - name: Debug parent dns ip
      debug:
          msg: "Parent DNS IP: {{parent_dns_ip.results[0].stdout}}"
      
    # Create container for dns
    - name: Create and start container for dns if already not present
      docker_container:
        name: "{{dns_containers[item].dns_name}}"
        image: "{{docker_image}}"
        state: started
        privileged: yes
        interactive: yes
        tty: yes
        detach: yes
        dns_servers:
            - "{{parent_dns_ip.results[0].stdout}}"
        volumes:
          - "/srv/docker/{{dns_containers[item].dns_name}}:/named"
        published_ports:
          - "{{dns_containers[item].publish_port}}:{{dns_containers[item].publish_port}}/udp"
      with_items: "{{ dns_containers | list }}"
    
    # Start named server  
    - name: Start the named
      command: "docker exec -itd {{dns_containers[item].dns_name}} /usr/sbin/named -4 -u named -c /named/etc/named.conf"
      become: yes 
      with_items: "{{ dns_containers | list }}"

      
    # Connect Container with bridge
    - name: Connect Container with bridge oir network
      include_tasks: connect_container_bridge.yaml
      vars:
        container_name: "{{dns_containers[item].dns_name}}"
        bridge_name: "{{dns_containers[item].subnet_name}}"
      with_items: "{{ dns_containers | list }}"


    # Configure initial setup in 
    - name: Configure dns normally
      include_tasks: vpc_dns_config.yaml
      vars:
        container_name: "{{dns_containers[item].dns_name}}"
        zone_name: "{{dns_containers[item].zone_name}}"
      when: dns_containers[item].level == 'vpc'
      with_items: "{{ dns_containers | list }}"

    - name: Configure dns subnet container
      include_tasks: subnet_dns_config.yaml
      vars:
        container_name: "{{dns_containers[item].dns_name}}"
        zone_name: "{{dns_containers[item].zone_name}}"
        parent_dns_name: "{{dns_containers[item].parent_dns_name}}"
        endpoint_name: "{{dns_containers[item].endpoint_name}}"
      when: dns_containers[item].level == 'subnet'
      with_items: "{{ dns_containers | list }}"

    # Write to database or run this script seperately from shell
    - name: Writing this newly created dns to DB
      include_tasks: write_dns_vm_db.yml
      vars:
        dns_vms: "{{dns_containers}}"
      become: yes
